// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_member.sql

package db

import (
	"context"
)

const deleteChatMember = `-- name: DeleteChatMember :one
DELETE FROM public.chat_member WHERE chat_id = $1 AND user_id = $2
RETURNING chat_id, user_id
`

type DeleteChatMemberParams struct {
	ChatID int64
	UserID int64
}

func (q *Queries) DeleteChatMember(ctx context.Context, arg DeleteChatMemberParams) (ChatMember, error) {
	row := q.db.QueryRow(ctx, deleteChatMember, arg.ChatID, arg.UserID)
	var i ChatMember
	err := row.Scan(&i.ChatID, &i.UserID)
	return i, err
}

const getChatMemberByChatId = `-- name: GetChatMemberByChatId :many
SELECT chat_id, user_id FROM public.chat_member WHERE chat_id = $1
`

func (q *Queries) GetChatMemberByChatId(ctx context.Context, chatID int64) ([]ChatMember, error) {
	rows, err := q.db.Query(ctx, getChatMemberByChatId, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMember
	for rows.Next() {
		var i ChatMember
		if err := rows.Scan(&i.ChatID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatMemberByChatIdAndUserId = `-- name: GetChatMemberByChatIdAndUserId :one
SELECT chat_id, user_id FROM public.chat_member WHERE chat_id = $1 AND user_id = $2
`

type GetChatMemberByChatIdAndUserIdParams struct {
	ChatID int64
	UserID int64
}

func (q *Queries) GetChatMemberByChatIdAndUserId(ctx context.Context, arg GetChatMemberByChatIdAndUserIdParams) (ChatMember, error) {
	row := q.db.QueryRow(ctx, getChatMemberByChatIdAndUserId, arg.ChatID, arg.UserID)
	var i ChatMember
	err := row.Scan(&i.ChatID, &i.UserID)
	return i, err
}

const getChatMemberByUserId = `-- name: GetChatMemberByUserId :many
SELECT chat_id, user_id FROM public.chat_member WHERE user_id = $1
`

func (q *Queries) GetChatMemberByUserId(ctx context.Context, userID int64) ([]ChatMember, error) {
	rows, err := q.db.Query(ctx, getChatMemberByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMember
	for rows.Next() {
		var i ChatMember
		if err := rows.Scan(&i.ChatID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const migrateChatMemberChatId = `-- name: MigrateChatMemberChatId :execrows
UPDATE public.chat_member
SET chat_id = $1
WHERE chat_id = $2
`

type MigrateChatMemberChatIdParams struct {
	NewChatID int64
	OldChatID int64
}

func (q *Queries) MigrateChatMemberChatId(ctx context.Context, arg MigrateChatMemberChatIdParams) (int64, error) {
	result, err := q.db.Exec(ctx, migrateChatMemberChatId, arg.NewChatID, arg.OldChatID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const upsertChatMember = `-- name: UpsertChatMember :one
INSERT INTO public.chat_member (chat_id, user_id)
VALUES ($1, $2)
ON CONFLICT (chat_id, user_id) DO NOTHING
RETURNING chat_id, user_id
`

type UpsertChatMemberParams struct {
	ChatID int64
	UserID int64
}

func (q *Queries) UpsertChatMember(ctx context.Context, arg UpsertChatMemberParams) (ChatMember, error) {
	row := q.db.QueryRow(ctx, upsertChatMember, arg.ChatID, arg.UserID)
	var i ChatMember
	err := row.Scan(&i.ChatID, &i.UserID)
	return i, err
}
